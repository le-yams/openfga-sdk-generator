The documentation below refers to the `{{appShortName}}Client`, to read the documentation for `{{appShortName}}Api`, check out the [`v0.1.1` documentation](https://github.com/{{gitUserId}}/{{gitRepoId}}/tree/v0.1.1#readme).

> The {{appShortName}}Client will by default retry API requests up to {{defaultMaxRetry}} times on 429 and 5xx errors.

#### No Credentials

```python
import {{packageName}}
from {{packageName}}.client import OpenFgaClient


async def main():
    configuration = {{packageName}}.ClientConfiguration(
        api_scheme = {{appUpperCaseName}}_API_SCHEME, # optional, defaults to "https"
        api_host = {{appUpperCaseName}}_API_HOST, # required, define without the scheme (e.g. api.{{sampleApiDomain}} instead of https://api.{{sampleApiDomain}})
        store_id = {{appUpperCaseName}}_STORE_ID, # optional, not needed when calling `CreateStore` or `ListStores`
        authorization_model_id = {{appUpperCaseName}}_AUTHORIZATION_MODEL_ID, # Optional, can be overridden per request
    )
    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

```

#### API Token

```python
import {{packageName}}
from {{packageName}}.client import OpenFgaClient
from {{packageName}}.credentials import Credentials, CredentialConfiguration


async def main():
    configuration = {{packageName}}.ClientConfiguration(
        api_scheme = {{appUpperCaseName}}_API_SCHEME, # optional, defaults to "https"
        api_host = {{appUpperCaseName}}_API_HOST, # required, define without the scheme (e.g. api.{{sampleApiDomain}} instead of https://api.{{sampleApiDomain}})
        store_id = {{appUpperCaseName}}_STORE_ID, # optional, not needed when calling `CreateStore` or `ListStores`
        authorization_model_id = {{appUpperCaseName}}_AUTHORIZATION_MODEL_ID, # Optional, can be overridden per request
        credentials = Credentials(
            method='api_token',
            configuration=CredentialConfiguration(
                api_token= {{appUpperCaseName}}_API_TOKEN,
            )
        )
    )
    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

```

#### Client Credentials

```python
import {{packageName}}
from {{packageName}}.client import OpenFgaClient
from {{packageName}}.credentials import Credentials, CredentialConfiguration


async def main():
    configuration = {{packageName}}.ClientConfiguration(
        api_scheme = {{appUpperCaseName}}_API_SCHEME, # optional, defaults to "https"
        api_host = {{appUpperCaseName}}_API_HOST, # required, define without the scheme (e.g. api.{{sampleApiDomain}} instead of https://api.{{sampleApiDomain}})
        store_id = {{appUpperCaseName}}_STORE_ID, # optional, not needed when calling `CreateStore` or `ListStores`
        authorization_model_id = {{appUpperCaseName}}_AUTHORIZATION_MODEL_ID, # Optional, can be overridden per request
        credentials = Credentials(
            method='client_credentials',
            configuration=CredentialConfiguration(
                api_issuer= {{appUpperCaseName}}_API_TOKEN_ISSUER,
                token_endpoint= {{appUpperCaseName}}_API_TOKEN_ENDPOINT, // Optional, default is https://<api_issuer>/oauth/token
                api_audience= {{appUpperCaseName}}_API_AUDIENCE,
                client_id= {{appUpperCaseName}}_CLIENT_ID,
                client_secret= {{appUpperCaseName}}_CLIENT_SECRET,
            )
        )
    )
    # Enter a context with an instance of the OpenFgaClient
    async with OpenFgaClient(configuration) as fga_client:
        api_response = await fga_client.read_authorization_models()
        await fga_client.close()

```

#### Synchronous Client

To run outside of an async context, the project exports a synchronous client
from `openfga_sdk.sync` that supports all the credential types and calls,
without requiring async/await.

```python
import {{packageName}}
from {{packageName}}.sync.client import OpenFgaClient


def main():
    configuration = {{packageName}}.ClientConfiguration(
        api_scheme={{appUpperCaseName}}_API_SCHEME, # optional, defaults to "https"
        api_host={{appUpperCaseName}}_API_HOST, # required, define without the scheme (e.g. api.{{sampleApiDomain}} instead of https://api.{{sampleApiDomain}})
        store_id={{appUpperCaseName}}_STORE_ID, # optional, not needed when calling `CreateStore` or `ListStores`
        authorization_model_id={{appUpperCaseName}}_AUTHORIZATION_MODEL_ID, # optional, can be overridden per request
    )
    # Enter a context with an instance of the OpenFgaClient
    with OpenFgaClient(configuration) as fga_client:
        api_response = fga_client.read_authorization_models()
```
